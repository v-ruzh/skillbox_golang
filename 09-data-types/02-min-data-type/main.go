package main

import (
	"fmt"
  "math"
)

/* Задание 2. Минимальный тип данных
Что нужно сделать
Достаточно часто при передаче по Сети или сохранении больших объёмов данных приходится выбирать тип с минимальным размером памяти, чтобы экономить трафик или место на диске. Напишите программу, в которую пользователь вводит два числа (int16), а программа выводит, в какой минимальный тип данных можно сохранить результат умножения этих чисел.

Советы и рекомендации
Обратите внимание, что положительный результат можно сохранить в меньшем типе за счёт использования uint8, uint16. Чтобы не возникло проблем с переполнением в процессе умножения, числа считывайте в int16, а перед умножением переведите их в int32.

Проверить на примерах:

1 1 результат uint8

1 −1 результат int8

640 100 результат uint16

−640 100 результат int32

3000 3000 результат uint32

−3000 3000 результат int32 */

func main() {
	fmt.Println("Минимальный тип данных.")

  var a, b int16
  fmt.Scan(&a)
  fmt.Scan(&b)

  c := int64(a)*int64(b)

  if c > 0 {
    if c <= math.MaxUint8 {
      fmt.Println("uint8")
    } else if c <= math.MaxUint16 {
      fmt.Println("uint16")
    } else {
      fmt.Println("uint32")
    } 
  } else {
    if c >= math.MinInt8 {
      fmt.Println("int8")
    } else if c >= math.MinInt16 {
      fmt.Println("int16")
    } else {
      fmt.Println("int32")
    }
  }
}
